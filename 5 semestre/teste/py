import unittest



def avaliar_notas(n1, n2, n3, media_exercicios):
    if n1 < 0 or n1 > 10:
        raise ValueError('Valor inv치lido para n1')
    if n2 < 0 or n2 > 10:
        raise ValueError('Valor inv치lido para n2')
    if n3 < 0 or n3 > 10:
        raise ValueError('Valor inv치lido para n3')
    if media_exercicios < 0 or media_exercicios > 10:
        raise ValueError('Valor inv치lido para media_exercicios')
    media_aproveitamento = (n1 + 2*n2 + 3*n3 + media_exercicios)/7
    if media_aproveitamento >= 9.0:
        return 'A'
    elif media_aproveitamento >= 7.5 and media_aproveitamento < 9:
        return 'B'
    elif media_aproveitamento >= 6.0 and media_aproveitamento < 7.5:
        return 'C'
    elif media_aproveitamento < 6.0:
        return 'D' 

class TesteSoma(unittest.TestCase):

    def test_excecao_tipos_incompativeis(self):
        self.assertRaises(ValueError, avaliar_notas, -1,0,0,0)

    def test_excecao_tipos_incompativeisdois(self):
        self.assertRaises(ValueError, avaliar_notas, 0,-1,0,0)

    def test_excecao_tipos_incompativeistres(self):
        self.assertRaises(ValueError, avaliar_notas, 0,0,-1,0)

    def test_funcao_notaUm(self):
        self.assertEqual(avaliar_notas(10,10,10,10), "A")

    def test_funcao_notadois(self):
        self.assertEqual(avaliar_notas(9,9,9,9), "A")

    def test_funcao_notatres(self):
        self.assertEqual(avaliar_notas(7.5,7.5,7.5,7.5), "B")

    def test_funcao_notaquatro(self):
        self.assertEqual(avaliar_notas(7.4,7.4,7.4,7.4), "C")
    
    def test_funcao_notacinco(self):
        self.assertEqual(avaliar_notas(6.0,6.0,6.0,6.0), "C")    

    def test_funcao_notas(self):
        self.assertEqual(avaliar_notas(5.9,5.9,5.9,5.9), "D")e

    def test_funcao_notasSete(self):
        self.assertEqual(avaliar_notas(0,0,0,0), "D")







if __name__ == '__main__':

	unittest.main()